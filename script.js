'use strict';
/**
 * Lesson06 General
 * Gaming Bot on a function closures
    УСЛОЖНЕННОЕ ЗАДАНИЕ:
    Дописать функционал игрового бота.
    Кол-во попыток пользователя должно быть ограничено: 10
    — если пользовательское число больше, то бот выводит "Загаданное число меньше, осталось попыток ..." и предлагает ввести новый вариант;
    — если пользовательское число меньше, то бот выводит "Загаданное число больше, осталось попыток ..." и предлагает ввести новый вариант;
    — если пользователь вводит правильное число, то бот выводит "Поздравляю, Вы угадали!!! Хотели бы сыграть еще?", при нажатии ОК игра перезапускается (снова 10 попыток и новое загаданное число)
    — если пользователь ввел не число, то выводит сообщение "Введи число!" и предлагает ввести новый вариант;
    — если пользователь нажимает "Отмена", то игра выводит прощальное сообщение и завершается.
    — если закончились попытки то программа сообщает: "Попытки закончились, хотите сыграть еще?"
    Программа должны быть выполнена с помощью рекурсии, без единого цикла.
    Загаданное число и оставшиеся кол-во попыток должно храниться «в замыкании»
*/

const isNumber = function name(number) {
  return !isNaN(parseInt(number)) && isFinite(number);
};

//функция генерирует случайное целое число от MIN до MAX
// const MIN = 0;
// const MAX = 100;
const getRandomInt = (MIN, MAX) => {
  return Math.floor(Math.random() * (MAX - MIN)) + MIN; //Максимум не включается, минимум включается
};

//Используйте функции alert, confirm, prompt для общения с пользователем

const main = () => {
  // let recurseCount = 0;
  const seed = getRandomInt(0, 100); //генерим загаданое число сохранится в замыкании функции
  const N = 10;
  const delta = 20;
  let tries = N; //количество попыток храним в замыкании

  const next = () => {
    let userAnswer; // сюда сохраним ответ пользователя

    // функция обработки цифровой семантики слова попытка
    let getTry = (count) => {
      if (count == 0) {
        return 'Ни одной попытки';
      }
      if (count == 1) {
        return '1 попытка';
      } // 1 попытка
      if (count == 2 || count == 3 || count == 4) {
        return count + ' попытки';
      } // 2, 3, 4 попытки
      if (count >= 5 && count <= 10) {
        return count + ' попыток';
      } // 5, 6, 7, 8, 9, 10, 0 попыток
    };

    if (tries <= 0) {
      alert('У тебя не осталось попыток\n' + 'Игра окончена!');
      return; //выход из функции по истечению колличества попыток
    } else {
      // tries > 0
      userAnswer = prompt('Угадай число от 1 до 100\n' + 'У тебя ' + getTry(tries));
    }
    // console.log('Попытка: ' + tries + '\nОтвет пользователя: ', userAnswer);

    if (userAnswer === null) {
      alert('Пользователь нажал Escape отмена\nКонец игры');
      return; //выход из функции по Escape
    }

    userAnswer = parseInt(userAnswer);
    //проверка на корректость ввода данных отсекаем начисловые значения
    if (!isNumber(userAnswer)) {
      alert('Ошибка! Ты ввел строку!!!\nНужно ввести целое число от 1 до 100');
      //   tries++; //в этом случае количество попыток не должно уменьшаться, а пользователь вводит число повторно
      //   --tries; //дикримент колличества попыток
      next(); //следующий запуск итеррации рекурсии

    } else if (userAnswer < 1 || userAnswer > 100) {
      alert(`Ошибка! Некорректный ввод!
Нужно ввести целое положительное число в диапазоне от 1 до 100`);
      // ввод числа повторно, количество попыток не изменяется
      next(); //следующий запуск итеррации рекурсии

    } else if (seed < userAnswer) {
      //пользователь ввел число больше загаданого
      if (Math.abs(userAnswer - seed) > delta) {
        // delta=20
        alert(`Загаданное число ЗНАЧИТЕЛЬНО меньше << ${userAnswer}
У тебя осталось еще ${getTry(tries - 1)} чтобы угадать`);
      } else {
        alert(`Почти угадал!
Но все же загаданное число немного меньше < ${userAnswer}
У тебя осталось еще ${getTry(tries - 1)} чтобы угадать`);
      }
      --tries; //дикримент колличества попыток
      next(); //следующий запуск итеррации рекурсии

    } else if (seed > userAnswer) {
      //пользователь ввел число меньше загаданого

      if (Math.abs(seed - userAnswer) > delta) {
        // delta=20
        alert(`Загаданное число ЗНАЧИТЕЛЬНО БОЛЬШЕ >> ${userAnswer}
У тебя осталось еще ${getTry(tries - 1)} чтобы угадать`);
      } else {
        alert(`Почти угадал!\nНо все же загаданное число немного БОЛЬШЕ > ${userAnswer}
У тебя осталось еще ${getTry(tries - 1)} чтобы угадать`);
      }
      --tries; //дикримент колличества попыток
      next(); //следующий запуск итеррации рекурсии

    } else if (seed === userAnswer) {
      alert(`Поздравляю, Вы угадали!
Загаданное число ${userAnswer} за ${getTry(N - tries)}`);
      return; //выход из функции
      //!Пользователь выиграл!!!!
    }
    //? --tries; //дикримент колличества попыток
    //? next(); //следующий запуск итеррации рекурсии
  };

  return next; //возвращаем ссылку на функцию в замыкании
};

//Переделываем цикл на рекурсию
const gamePlay = () => {
  let nextPlay = main();
  nextPlay(); //по сути наша функция next() следующую итеррацию рекурсии

  // спрашиваем пользователя поиграть заново еще раз
  if (confirm('Поиграем еще?\nДа / Нет')) {
    // console.log('lets play onemore time');
    gamePlay(); //? следующий рекурсивный вызов игры
  } else {
    alert('Было интересно играть с Вами\nДо скорого');
    return; //выход из игры
  }
};
gamePlay();
